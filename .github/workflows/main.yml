name: Auto test solution
on: push

# Environment Variables Configuration
env:
  PG_DATABASE: wd-sports-test2
  PG_USER: postgres
  PG_PASSWORD: ${{ secrets.POSTGRES_PW }}
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job to run tests
  run-tests:
    # Containers must run in Linux based operating systems
    runs-on: ubuntu-latest

    # Service container for PostgreSQL
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres:11.7
        # Provide the password for postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PW }}
          POSTGRES_DB: wd-sports-test2
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      # Checkout repository code
      - name: Check out repository code
        uses: actions/checkout@v4

      # Install dependencies
      - name: Install dependencies
        run: npm ci

      # Run unit tests
      - name: Run unit tests
        run: npm test

        # Run the application and integration tests
      - name: Run the app
        id: run-app
        run: |
          npm install
          npx sequelize-cli db:drop
          npx sequelize-cli db:create
          npx sequelize-cli db:migrate
          PORT=3500 npm run clean:start &
          sleep 5

      - name: Run integration tests
        run: |
          npm install cypress cypress-json-results
          npx cypress run
          
  build-and-push-image:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write


    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}


      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}


      - name: Build and push Docker image
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  # Deployment Job
  deploy:
    name: Deploy
    needs: [run-tests]
    runs-on: ubuntu-latest

    steps:
      # Deploy to production
      - name: Deploy to production
        uses: johnbeynon/render-deploy-action@v0.0.8
        with:
          service-id: ${{ secrets.SERVICE_ID }}
          api-key: ${{ secrets.RENDER_API_KEY }}

  # Error Reporting and Notification Job
  notify-error:
    needs: [run-tests, deploy]
    runs-on: ubuntu-latest
    if: failure()

    steps:
      # Send error notification to Slack
      - name: Send error notification to Slack
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
            "text": "Error in CI/CD Pipeline \n Workflow: ${{ github.workflow }} failed. Check the workflow run for details:  https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  # Success Notification Job
  notify-success:
    needs: [run-tests, deploy]
    runs-on: ubuntu-latest
    if: success()

    steps:
      # Send success notification to Slack
      - name: Send success notification to Slack
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "CI/CD Pipeline completed successfully"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
